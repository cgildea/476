\def\chapternumber{Setting Up WWW -- 3 May 2012}
\input slides.tex
\centerline{\bbf Setting up WWW}

{\ltt{}httpd}: the daemon that provices WWW service.
\break
Several free versions exist, apache is the most common.
\break
Usually port 80, but URLs can include port number.
\break
Port 8080: no need to be root.

Configuration and logs are sometimes kept in a directory subtree.
\break
On ours the configuration directory is
{\ltt{}/etc/httpd}
\break
The configuration file is {\ltt{}httpd.conf}
\break
The log files are kept where specified by the configuration file.

Command line options can set configuration file and some options.

Starting the server:
\break
{\ltt{}httpd -f /usr/www/httpd.conf -X}
\break
Use designated configuration file.
\break
Use debug mode, server runs in current terminal.

Usually in non-debug cases the server is started with the
{\ltt{}apachectl} command.
\break
At boot the system starts it with {\ltt{}rc.httpd} (which
calls {\ltt{}apachectl}); this script can be invoked
by hand to start, stop or restart the server.


\newslide
\centerline{{\ltt{}httpd.conf}}

{\program
#  (comment line)
Listen 80
User apache
Group apache
ServerRoot /usr
ErrorLog /var/log/httpd/error_log
ServerAdmin you@example.com
Include /etc/httpd/extra/httpd-userdir.conf
DocumentRoot /srv/http/htdocs
\endprogram}

Server is running on port 80
\break
Server runs as user:apache, group:apache
\break
{\ltt{}ServerRoot}: prepend {\ltt{}/usr} to relative log and conf paths
\break
Put errors in file: {\ltt{}error_log} 
\break
E-mail address of the www administrator
\break
Supplemental features are added by includes
\break
{\ltt{}DocumentRoot}: where the html files live (prepend).
\break
The web page {\ltt{}/xx.html} is found at
\break
{\ltt{}/srv/http/htdocs/xx.html}
\break
(Our {\ltt{}DocumentRoot} is {\ltt{}/var/www/htdocs})

\newslide
\centerline{Access Control ({\ltt{}httpd.conf})}

Principle: permissions are granted and retracted in the order given
in the config file.
\break
He who grants/denies last grants/denies best.

{\program
<Directory />
Options FollowSymLinks
AllowOverride None
Order allow,deny
Deny from all
</Directory>
\endprogram}

Web access permissions may be specified for each directory
Any directive applies to the named directory and any directories
under it, unless overridden by a later (hopefully more specific) directive.

Symbolic links occuring in web directories may be followed through this
directory.
(Can bring directories not under the document root into the web area.)

Access control files are not allowed to do anything

Access denied to this directory and all subdirectories.
\break
Lower directories must specifically allow/enable things.
Your password file and other files outside the web hierarchy
are not web accessible.

\newslide
\centerline{{\ltt{}httpd.conf} (access control continued)}

{\program
<Directory /var/www>
Options Indexes FollowSymLinks
AllowOverride FileInfo
Order allow,deny
allow from all
deny from .hacker.com
</Directory>
\endprogram}

Index files are used, symbolic links are followed.

Access control files are allowed to used the {\ltt{}FileInfo} directive.
Allowed overrides are {\ltt{}All}, {\ltt{}None} or any combination
of {\ltt{}FileInfo}, {\ltt{}AuthConfig}, {\ltt{}Limit}.

Web access is allowed to this directory
and all subdirectories not mentioned in other directives except
for browsers from the {\ltt{}hacker.com} domain.
\break
{\ltt{}Order} is important, reversing the order would
allow from all because the allow would be processed last
and ``last is best".

Reminder: must follow the {\ltt{}<Directory />} directory to have
any effect at all.
\break
\newslide
\centerline{{\ltt{}httpd.conf} (more access control)}

\vt

{\program
<Directory /home/*>
AllowOverride All
Options Indexes FollowSymLinks
Order deny,allow
Deny from all
Allow from .cecs.csulb.edu
</Directory>
\endprogram}

{\ltt{}/home/*}: you can use wild cards to specify directories,
in fact you can use extended regular expressions.

The access control file is allowed to contain any access control directive.

These directories are available only from machines within the department.

\vf

{\program
DirectoryIndex index.html index.shmtl index.cgi
\endprogram}

If the browser requests a directory this is the file that
will be used to answer that request.
\break
If none of these exist you get a text listing of the
files in the directory.

\newslide
\centerline{{\ltt{}httpd.conf} (more)}

\vt
{\cprogram
<FilesMatch "^\.ht">
Order allow,deny
Deny from all
Satisfy All
</FilesMatch>
@endprogram}

Web access to specific files can be explicitly denied.
\break
Here any file starting with {\ltt{}.ht} is disallowed.
\break
This directive must be inside a directory directive
(applies to the directory and subs) or and htaccess
file (covered later).


{\ltt{}AddHandler cgi-script .cgi}
\break
CGI scripts (actually any executable) can be placed in any web directory
rather than just the script directory
(automatically enabled for files in the script directory)
\break
To be executed, they must be marked executable ({\ltt{}chmod})
and the file name must end in {\ltt{}.cgi}.
\break
``{\ltt{}ExecCGI}" must be an ``{\ltt{}Options}" for that directory

\vt
{\program
AddType text/html .shtml
AddOutputFilter INCLUDE .shtml
\endprogram}

Server side scripts may be enabled.
\break
Must have ``{\ltt{}Options Includes}"

\newslide
\centerline{\bbf Extra Features}

Extra features are accessed using the {\ltt{}Include} directive

{\ltt{}http-userdir.conf}

If this is present, access is allowed to users personal web pages
(e.g. {\ltt{}http://server/~bob})

{\program
UserDir public_html
\endprogram}

Web access is not supplied to the users home directory, only
to the users web directory. This directive gives  the name of the users
web directory.

Warning, the include file has a {\ltt{}Directory} directive,
it works, but if you want to allow users to have scripts or
server side includes, you will need to edit it.

\vt
{\ltt{}mod_php.conf}

Include this if you want to allow php scripts.

\vt
{\ltt{}httpd-ssl.conf}

Include this if you want to allow ssl (secure) access to your web pages.

\newslide
\centerline{\bbf Extra Features (more) }

{\ltt{}http-vhosts.conf}

You are supplying web service for several domains (other than
the name of your host).
\break
A separate directory is designated for the web pages of
each of the vitual hosts.
Separate entries are designated for the logfiles and the server administrator.

\vt
{\ltt{}http-default.conf}

Every value given in here is a default value used by the web server.
\break
The include won't modify anything, unless you edit the file.
\break
(The file gives you the options to override the server defaults.)
\break
There are several entries pertaining to the persistence of connections
from clients.
\break
There is an {\ltt{}AccessFileName} entry that allows you to change
the name of the access file from {\ltt{}.htaccess}

\vt
{\ltt{}http-mpm.conf}

Lets you manage the behavior of the server.
\break
Detail on next slide.

\newslide
\centerline{\bbf Server Behavior}

{\program
StartServers 5
MaxClients 64
MinSpareServers 5
MaxSpareServers 10
MaxRequestsPerChild 16
\endprogram}

This is a multi-process concurrent connection-oriented server
(process based),
one {\ltt{}httpd} process exists per client
\break
For efficiency: after a client disconnects, the process may be reallocated
to a new client (instead of killing the old one and starting a new one).

{\ltt{}StartServers}: fork this many at boot

{\ltt{}MaxClients}: limit the number of clients to prevent thrashing.

{\ltt{}MinSpare} if you don't have this many spares, fork new processes
at the rate of 1/sec.

{\ltt{}MaxSpare}: if you have more than this many spares, kill the extras.

{\ltt{}MaxRequestsPerChild}: limits number of requests per client to
prevent a few users from locking out others.
0 indicates the number of requests is unlimited.

\newslide
%REMOVED
%\centerline{\bbf Server Behavior}
%
%{\program
%StartServers          2
%MaxClients          150
%MinSpareThreads      25
%MaxSpareThreads      75
%ThreadsPerChild      25
%MaxRequestsPerChild   0
%\endprogram}
%
%This is a thread based server.
%
%{\ltt{}ThreadsPerChild} 
%\newslide

\centerline{\bbf Sample .htaccess}

{\cprogram
AuthName "MyCluster"
AuthType Basic
AuthUserFile /etc/httpd/users
require valid-user
@endprogram}

An account and password is required for web access of this directory.
\break
After entering a password any other access will be automatically
granted (without asking for a password) to any other secured directory
with an {\ltt{}AuthName} of {\ltt{}MyCluster}.

{\ltt{}Basic} implies simple password encrypting.

The name of the password file is {\ltt{}/etc/httpd/users}.
\break
The format of the password file is ``username:crypt"
\break
A non-rooted path can be given for the password file but may not
work a particular server.

{\ltt{}require} limits whose password will be checked.
\break
{\ltt{}require sue bob} will only check the password for bob and sue;
all other users will be automatically denied.
\break
The reserved word {\ltt{}valid-user} will grant permission to anyone
with a name and password in the specified password file.
\newslide
\centerline{\bbf htpasswd}

The httpd password file is not the system password file.

The {\ltt{}htpasswd} command is used to create/add/modify passwords
in this file.

Command Form:
\break
{\ltt{}htpasswd -c pwd bob}

A password file called {\ltt{}pwd} is created and an entry for bob will be
added. You will be prompted for the password bob will use.

The {\ltt{}-c} option causes a new password file to be created.
Do not use this if the files already exists.

Bob does not need to be a user ({\ltt{}/etc/passwd}).

The password is independent of any other password for bob.
\newslide
\centerline{\bbf Cautions}

Your htaccess and htpassword files should not be readable from the web.

This is done for the default file 
of {\ltt{}.htaccess} and {\ltt{}.htpasswd}
by a {\ltt{}FilesMatch} directive in the
default version of {\ltt{}httpd.conf}

Recommend use of the default names.

No way to prevent users from using another name
and making their password file vulnerable.
\newslide
\centerline{\bbf Ubuntu}

Include file are found in the {\ltt{}sites_available} directory.

Default {\ltt{}httpd.conf} includes everything
found in the {\ltt{}sites_inuse} directory.

An ``extra" is enabled by making a softlink in the ``inuse" directory
that refers to a file in the ``available" directory.

({\ltt{}ln -s ../...})
\bye
