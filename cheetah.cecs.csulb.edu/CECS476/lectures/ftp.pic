\def\chapternumber{Anonymous FTP -- 19 December 2012}
\input slides.tex
\centerline{\bbf FTP}

Servers and Services:

You can run any type of server on your machine.
\break
That server can provide any services you want.
\break
You server can have any means of security you want.
\break
A server run by a user (as opposed to root) cannot provide 
services that exceed that user's permissions.

Example: {\ltt{}telnet} -- Allows you to login.
\break
Telnet server ({\ltt{}telnetd}) runs as root --
\break
it can do anything it wants
\break
Our version: requires valid user name and valid password
\break
Limits permissions to that of the valid user
\break
Another version could: allow root priviledge without a password.
\break
{\ltt{}telnetd} -- responds to anyone contacting your machine on port 23.

Example: {\ltt{}ftpd} -- allows file transfer.
\break
Exact security/permission depends on version you use.
\break
Responds to anyone contacting your machine on port 21.
\break
Our version allows anonymous ftp.
\newslide
\centerline{\bbf File Transfer Protocol}

Allows files to be transfered between two machines.

Several versions of server available

Clients include ftp, mozilla, I.E.
\break
If you know the protocol you can use the ftp service.

Procedure: 
\break
1) login
\break
2) locate file (or directory)
\break
3) transfer file

Protocol listed in {\ltt{}/etc/services} 
\break
Server listed in {\ltt{}inetd.conf}
\break
Our machines already run {\ltt{}ftpd}.


A) Normal account: priviledges = user log in

B) Anonymous: public repository or archive
\break
Allow anyone to login (no password)
\break
Allow them to copy files out.
\break
Allowing anybody to deposit any thing is not a good idea

\newslide
\centerline{\bbf Anonymous ftp issues}

1) limited access to files.
\break
What you choose should be made available, nothing else.
\break
Your system files 
({\ltt{}passwd})
should not be accessible
\break
Restrict anonymous users to read-only access

Problem: {\ltt{}/} and other directories must be readable for normal Unix
usage (or you can't get to your home, can't run commands like lpr)

2) limit commands anonymous users are allowed
\break
Allowing someone anonymous to {\ltt{}cc}, {\ltt{}vhdl}, ...
is a bad.

Problem: commands you need to allow (like {\ltt{}ls})
are in the same directory as commands you don't want to allow.

Solution (some versions): {\ltt{}chroot}--change the root directory
\break
Normally you have access starting at {\ltt{}/} and going down.

You specify {\ltt{}chroot /home/ftp}
\break
Unix behaves as if {\ltt{}/home/ftp} were the top directory.
\break
You have access from there down.
\break
After you {\ltt{}chroot}, for you that is considered {\ltt{}/}
\break
For you: nothing outside this subdirectory exists
\break
Our {\ltt{}ftpd}: if user logs in as {\ltt{}anonymous}, no password
is required and the {\ltt{}ftpd} does {\ltt{}chroot ~ftp}
\newslide
\centerline{\bbf chroot issues}

You need {\ltt{}/etc/passwd} for Unix to work.
\break
{\ltt{}~ftp/etc/passwd} acts like {\ltt{}/etc/passwd}
\break
have only the ftp entry in this version of {\ltt{}passwd}

You need {\ltt{}/bin/ls},
\break
Now that corresponds to {\ltt{}~ftp/bin/ls}

Admin task: set up a mini-Unix in {\ltt{}~ftp}

Overview of setting up an ftp site:
\break
because setting up anonymous ftp is so common much of this may already be setup
with by the Unix distribution,
a good sys-admin should verify the setup.
\break
1) create the pseudo-user ftp 
\break
2) Create a mini-unix area in ftp's home directory
\break
3) Set the access permissions and ownership
\break
4) Add files to be shared to the public directory
\vt
Note: in {\ltt{}proftp} the {\ltt{}ls} command is
built into the {\ltt{}proftpd} server, so a separate
command is not needed..
\newslide
1) creating the ftp pseudo-user
\break
a) Add ftp group to {\ltt{}/etc/group}
\break
b) Add ftp user to {\ltt{}/etc/passwd}

Often the UID is set to a large number (so it can be easily spotted).

One of the existing groups can be used 
\break
Group and other permissions match in the mini-unix area 
\break
No setgid programs exist for this group

Security recommendation special {\ltt{}ftp} group
\vt
2) If needed, create a mini-unix
\break
a) create {\ltt{}~ftp} with subdirectories:
{\ltt{}~ftp/etc} {\ltt{}~ftp/bin}
\break
b) create {\ltt{}~ftp/etc/passwd} one line
(copy from {\ltt{}passwd})
\break
c) create {\ltt{}~ftp/etc/group} one line from {\ltt{}group} 
\break
d) create {\ltt{}~ftp/bin} and copy in {\ltt{}/bin/ls}
\break
e) (?) if your {\ltt{}ls} uses a dynamic library,
\break
create {\ltt{}~ftp/lib} and copy it in.
\break
({\ltt{}ldd /bin/ls})
\break
our version: built in, no {\ltt{}bin} required
\break
f) create a {\ltt{}~ftp/pub} directories
\break
files to be shared will reside here
\newslide
3) Setting permissions and ownership.

Principle: prevent user {\ltt{}ftp} from changing anything.

a) {\ltt{}ftp} owns nothing
\break
{\ltt{}chown root.wheel ~ftp}
\break
{\ltt{}ls} can be set to be owned by {\ltt{}bin}

b) Nothing is writable
\break
Change directories to mode 555.
\break
no one can remove files 
\break
root can, but even root will often be asked for confirmation.
\break
Set {\ltt{}ls} (and any other executables) to mode 111
\break
Set libraries to mode 555
\break
Linux convention, dynamic libraries are executable

4) The public directory
\break
add subdirectories, mode 555.
\break
add files, set mode to 444.

User controlled availability
\break
add a directory mode 755, owned by user (not ftp).
\break
User can maintain files.
\newslide
\centerline{\bbf Dynamic Libraries}

Review: don't want every program to include copies of library code
(for large libraries).

Statically linked: compiler embeds code into program
\break
Advantage: runs regardless of libraries

Dynamically linked: at run time the library is found and loaded.

Static advantages:
\break
Never get ``library not found"
\break
Never get ``wrong version of library"

Dynamic advantages:
\break
Saves disk space (critical for big window handling libraries)
\break
Fixing library bugs does not require recompile of all programs that used
the old library version.

Dynamic problem:
\break
Two programs need different versions of the same library.

{\ltt{}ldd} -- list the dynamically loaded libraries the program needs.

{\ltt{}gcc} -- options to build static or dynamic linkage
\newslide
\centerline{\bbf ftp Config files}

{\ltt{}/etc/ftpusers} -- list of users not allowed to
ftp in.
\break
Usually {\ltt{}root}, {\ltt{}uucp}, {\ltt{}news}.
\break
If {\ltt{}ftp} is here, anonymous ftp is disabled.
\vt
{\ltt{}/etc/proftpd.conf} -- config specific to proftp version

inetd vs standalone start.

user/group: usually it switches to the user doing the ftp so this
is rarely used.

{\ltt{}PersistentPasswd}--off means use the standard libraries,
on means {\ltt{}ftpd} should access {\ltt{}password}, {\ltt{}group} and
{\ltt{}shadow} directly. On causes NIS to be ignored.

{\ltt{}SystemLog}--The name of a log file;
all ftp logins are logged into the file.

{\ltt{}TransferLog}--The name of a log file;
all ftp transfers are logged into the file.

Throttle controls.

\newslide
{\ltt{}proftp.conf} also provides you
nested control of directories using an html type syntax.

{\program
<Directory /*>
  AllowOverwrite on
</Directory>
<Anonymous ~ftp>
  <Limit WRITE>
    DenyAll
  </Limit>
  <Directory deposit>
    <Limit WRITE>
      AllowAll
    </Limit>
  </Directory>
</Anonymous>
\endprogram}

The above is an example.
\break
Normal users can overwrite files.
\break
The anonymous user will {\ltt{}chroot} to {\ltt{}~ftp}
\hfill\break
and cannot write anywhere (regardless of permissions)
except in the {\ltt{}deposit} directory
\break
You can also specify
the location of the welcome message and messages
displayed when you enter directories.

\newslide
\centerline{\bbf lftp client}

Can handle several protocols that are used for file transfer.
\break
{\ltt{}ftp}, {\ltt{}ftps}, {\ltt{}http}, {\ltt{}https},
{\ltt{}fish}, {\ltt{}sftp}, {\ltt{}file}

Reliable:
\break
non-fatal errors are ignored and the operation is repeated.
\break
uses the REST command to restart failed transfers in the middle
\break
will retry from the start if necessary

Shell like syntax:
\break
you can background a transfer
\break
you can have multiple transfers active
\break
you have job control over the transfers

Has a recursive options for downloading/uploading directory trees

Configuration files:
\break
{\ltt{}/etc/ltfp.conf}, {\ltt{}~/.lftprc}, {\ltt{}~/.lftp/rc}
\newslide
\centerline{\bbf sftp}

Client: {\ltt{}sftp}
\break
Server: {\ltt{}sshd} with {\ltt{}sftp-server}

Mechanism:
\break
Make an ssh connection to the {\ltt{}sshd} server
\break
Have the server run {\ltt{}sftp-server}

Advantages: 
\break
1) provides an encrypted connection for the file transfer
\break
2) uses ssh key verification

Disadvantages:
\break
Uses the standard account system (shell access).
\break
You can configure ssh to do only sftp and not shell.

\vt
Note: anonymous ftp doesn't usually use encryption,
\break
the contents of the file isn't private.
\bye
