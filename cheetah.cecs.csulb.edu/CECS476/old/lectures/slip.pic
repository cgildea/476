\def\chapternumber{Slip -- 24 November 1999}
\input slides.tex
\centerline{\bbf Configuring SLIP (/PPP)}

1) Both ends must run the (same) protocol.

2) Both ends must have IP numbers

3) Routes (at both ends) must know about the line

Actions:

IP packets are transmitted

   Hardware framing is different from ethernet/token ring

   Noisy lines handled by hardware framing/CRC

SLIP (PPP) must have absolute control of both ends
of the serial line.

\centerline{\bbf IP addresses}

{\bit Permanent:} (Internet Standard)
\break
Both serial ports have fixed IP numbers.

{\bit Dynamic:}
\break
Dial your server.
\break
Either server IP number is fixed
\break
or it informs you what IP number to use.
\break
Server assigns you a (temporary) IP number.

\newslide
\centerline{\bbf Slip Connections}

{\bit Permanent:}
\break
Dedicated line to service provider.
\break
At boot start SLIP daemon on both ends of line.

{\bit SLIP/PPP account:}
\break
Dial in and connect.
\break
Login with password.
\break
Login program (shell) is the slip server.
\break
Start slip on your end.

{\bit Shell account:}
\break
Dial in and login to an remote account.
\break
Run a slip emulator in the remote account.
\break
Start slip on your local machine using a special IP
{\ltt{}10.0.2.15}.
\break
The network thinks you are the remote account.
The emulator converts everything
into IP messages to your local machine
The emulator converts everything from
your local machine to something that looks
like it came from the remote account.

\newslide
\centerline{\bbf Serial Line Problems}

{\ltt{}/etc/rc.serial} --- configures the serial lines.
\break
almost always works, if not, lots of things to uncomment for
your particular card.

See {\ltt{}dmesg} or {\ltt{}/var/log/messages} to see if the
serial card was detected at boot.
\newslide
\centerline{\bbf Setting up  SLIP }

1)   Select/build networking kernel

2)  Configure loopback

3) dial in (cua0) to slip server

4) slattach (cua0) (give slip control of line)

5) ifconfig sl0 ourIP pointtopoint hisIP

6) route add default gw hisIP

Permanent line: skip the dial

\vt
Dialing in:

DIP: A program that does the above from a script.
\break
Build the script
\break
Run dip as root and you are connected
\newslide
\centerline{\bbf DIP scripts}

You are dialing some service provider (who has some protocol/operating system),
\break
using some modem (protocol)
\break
You need to dial, login, send and recieve attachment data (especially if the
service provider is assigning you an IP number).

You need a programming (shell script) language

{\ltt{}send}  --- transmit stuff to the modem or remote host

{\ltt{}get}  --- read stuff from local or remote host

{\ltt{}wait} --- dials and other stuff take time
\break
{\ltt{}wait ogin: 10}  --- wait 10 seconds or until you get a ``{\ltt{}ogin}".

{\ltt{}if} --- errors happen, what do you do

{\ltt{}mode SLIP} --- it's all set up, do the {\ltt{}slattach}, {\ltt{}ifconfig}
and {\ltt{}route} 
\newslide
\centerline{\bbf Sample DIP Output}


test/interactive mode:
\break
{\ltt{}dip -t} 


{\program
> DIP: Dialup IP Protocol Driver version 3.3.7n-uri (17 Apr 95)
> Written by Fred N. van Kempen, MicroWalt Corporation.
> 
> DIP: name=root home=/tmp
>      host=darkstar IP=10.0.2.15
>      prot=SLIP MTU=296
> 
> Modem set to "HAYES".

port cua1

> PORT: terminal port set to "cua1".
> DIP: tty_open: /dev/cua1 (3) DIP: tty_open: IBUF=1024 OBUF=1020
> DIP: tty: set_speed: 38400
> DIP: tty: set_databits: 8
> DIP: tty: set_stopbits: 1
> DIP: tty: set_parity: N

reset

dial 8249000

\endprogram}
\newslide
\centerline{\bbf PPP}

Both ends run {\ltt{}pppd}
\break
Configs in {\ltt{}/etc/ppp/} directory

Server/dial in: password entry.
\break
{\ltt{}ppp:*:10:10:PPP guy:/tmp:/etc/ppp/ppplogin}

Usually {\ltt{}ppplogin} is a script with:
\break
{\ltt{}exec pppd}
\break
Which runs starts a copy ppp deamon.

Client/dial out: 

dial, then start {\ltt{}pppd}
\break
Actually {\ltt{}pppd} can run a dial script

Uses several files in {\ltt{}/etc/ppp}
\break
{\ltt{}options} --- general options
\break
{\ltt{}ip-up} --- startup shell script
\break
{\ltt{}ip-down} --- terminating shell script

Startup script does {\ltt{}ifconfig} and {\ltt{}route}

Dialing: {\ltt{}pppd} accepts a {\ltt{}connect} parameter
\break
use {\ltt{}"chat -f command_file"}

{\ltt{}chat} is a separte command for handling dial outs.
\break
Like {\ltt{}dip} you can control it with a script

\bye
dial 8249000
Linux security 
 http://bach.cis.temple.edu/linux/linux-security
 ftp://linux.nrao.edu/pub/linux/security/list-archive
 ftp://info.cert.org/pub/cert_bulletins/VB-96.17.linux
