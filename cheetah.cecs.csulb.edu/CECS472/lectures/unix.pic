\def\chapternumber{unix review -- CECS 472 --- 14 December 2011}
\input slides.tex
\centerline{\bbf Unix}
\centerline{Use of the Unix System on a Network}

{\ltt{}man} -- read a manual entry
\break
{\ltt{}man ls} -- gives you the entry for {\ltt{}ls}
\break
{\ltt{}man 2 write} -- section 2 entry for {\ltt{}write}
\break
{\ltt{}man -k disk} -- lists all manual entries whose summaries include
the work {\bit disk}

Note: Manual section 1 contains commands.
Sections 2 and 3 contain the API calls. 
\break
As programmers, we usually want the section 2 or 3 entry,
\break
it gives the parameters and includes for the system calls.

Warning: machines differ (IBM vs. Linux vs. Free BSD)
\break
Read the manual for the correct machine

Linux pseudo terminals: 
\break
you have 6 terminals, alt-F1 .. alt-F6
\break
you can have up to 6 logins from one keyboard
\break
don't forget to logout on all terminals you were using

Network debugging techniques: 
\break
Run the client in one virtual terminal and the server in another.
\break
Have terminals open (using telnet) on different machines.
\newslide
\centerline{\bbf Compilers}

{\ltt{}gcc} -- the standard c compiler

Warning: what you compile on one machine will not run on another.

{\ltt{}.o} files created by one compiler cannot be used by another.

Technique: fully recompile, leave no {\ltt{}.o} files.

\vt
Example:

{\ltt{}gcc x.c y.c z.c -o prog}

Compiles 3 files, calls the executable {\ltt{}prog}
\break
One file must contain a function called {\ltt{}main}
\break
We will not use {\ltt{}.o} files as shown in the book because
this is dangerous when compiling for multiple architectures.
\break
If you omit the ``{\ltt{}-o}" option
the executable will be called {\ltt{}a.out};
dangerous if you are compiling both a client and a server.


To run the program, just type it's name.
\break
Example: {\ltt{}prog}

\newslide
\centerline{\bbf Copying Files}

{\ltt{}cp} -- copy file or files

{\ltt{}cp} list\_of\_files destination
\break
if the destination is a directory,
\break
--the files are placed in the directory
\break
--keeping their original names
\break
if the destination is not a directory,
\break
--the ``list" must contain only one file
\break
--and ``destination" is the new name of the file
\break
--the file is given the

The wild card ({\ltt{}*}) and the home directory ({\ltt{}~}) symbols may be
to specify the list of files.
For example:
\break
{\ltt{}ch*t}
\break
specifies all files starting with {\ltt{}ch} and ending
with {\ltt{}t}.
\break
{\ltt{}~/y.c}
\break
specifies the {\ltt{}y.c} program from your home directory
\break
{\ltt{}~joe/y.c}
\break
specifies the {\ltt{}y.c} program from joe's home directory

{\ltt{}cp  ~volper/src/*.c  ~/}
\break
copies all C programs from the
{\ltt{}src} subdirectory of the instructor into your home directory.
\break
(The final {\ltt{}/} is optional in this case.)

\newslide

\centerline{\bbf Printing}

The command to print is {\ltt{}lpr}.
\break
Arguments: a list of files to print

Example: {\ltt{}lpr x.c y.c}

Printing is enabled from named machines (i.e., not {\ltt{}lab35},
{\ltt{}lab76}) until the CECS 476 students complete the assignment
in which they  enable network printing.

\vf
\centerline{\bbf X Windows}

They may or may not be available depending on how well the student
administrator configures it on your machine.
\newslide
\centerline{\bbf Editing with vi}

{\ltt{}vi} \quad the standard unix screen editor.

You can edit text files.
\break
You cannot edit directories or compiler output.
\break
Use any editor you want, I'll review this one here.
\vt
Command:
\vt
{\program
vi file_name
\endprogram}

{\ltt{}file_name} is the name of a file
\vt
Action:
\vt
The file exists;
\break
you can change it
\vt
The file does not exist;
\break
the file will be created.
\vt
Example:

{\program
vi sample.note
\endprogram}
\newslide
\centerline{\bbf Editing Concepts}
\vt
Current location:

where the cursor is

where changes occur
\vf
Modes:
\vt
insert mode: what you type is inserted into the file
\vt
command mode: what you type is an editor command
\vt
In command mode: most of the 52 letter keys (upper and lower case)
and most of the special keys are commands.
\newslide
\centerline{\bbf vi Commands}
\centerline{Changing the current location}
\vt
Incrementally changing the current location: (two ways)
\vt
Use the arrow keys.
\vt
Use {\ltt{}h}, {\ltt{}j}, {\ltt{}k}, {\ltt{}l}

left, down, up, right.
\vf
\vf
Moving by jumping {\ltt{}G}

Example: {\ltt{}34G}

jump directly to line 34

\newslide
\centerline{\bbf vi Commands}
\centerline{Inserting}

(two ways to start)

``{\btt i}" insert in front of cursor position

``{\btt a}" insert (append) after cursor position.

both: you enter insert mode.
\vt
In insert mode: what you type is inserted.
\break
includes ``returns".
\break
backspace (sometimes the delete key) back up (uninsert).
\vt
To ``finish" an insertion type {\ltt{}<escape>}
\break
you go back to command mode.
\vt
Warning: some versions of vi do allow you to move around using the arrow keys
while in insert mode.
If the arrow keys produce funny results you are probably still in insert mode
on one of these versions.
\newslide
\centerline{\bbf vi Commands}
\centerline{Deleting}
\vt
``{\ltt{}d}" followed by how much
\vt
``{\ltt{}d2d}" delete 2 lines

the current line and the next line

``{\ltt{}dd}" same as {\ltt{}d1d}.
\vt
``{\ltt{}x}" delete a letter

the letter the cursor is on
\vt
``{\ltt{}X}" delete a letter

the letter in front of the cursor
\newslide
\centerline{\bbf vi Commands}
\centerline{Undo: (in case of mistake)}
\vf
``{\ltt{}u}" undo the last command.
\vf
``{\ltt{}U}" undo this line.

The last sequence of commands on this line are undone.

\vf
A second

``{\ltt{}u}" undo the undo.
\newslide
\centerline{\bbf vi Commands}
\centerline{Leaving the editor}
\vt
``{\ltt{}:wq}" save the changes and exit the editor.
\vt
``{\ltt{}:q!}" exit the editor {\bit without} making any changes to the original
file. (if you really goofed up)

\centerline{Saving without leaving the editor}

``{\ltt{}:w}" save the changes and stay in the editor.

Trick:
\break
``{\ltt{}:w} {\bit FileName}" save the changes into the specified file
\newslide
\centerline{\bbf Homework Hint}

The flags of interest for a file open are:

{\ltt{}O_RDONLY} \quad read only
\break
{\ltt{}O_WRONLY} \quad write only
\break
{\ltt{}O_RDWR} \quad read/write only (update)
\break
{\ltt{}O_CREAT} \quad If it doesn't exist, create it
\break
{\ltt{}O_TRUNC} \quad erase anything that is already in the file
\vt
The modes of interest are (this are bits):

{\ltt{}S_IRUSR} \quad user can read
\break
{\ltt{}S_IWUSR} \quad user can write

If the file is created, then the mode bits apply and
are used to set the read/write/execute attributes of the
file.
\break
Note: to get read and write you need to ``or" the mode bits:
\break
{\ltt{}S_IRUSR | S_IWUSR}
\bye
