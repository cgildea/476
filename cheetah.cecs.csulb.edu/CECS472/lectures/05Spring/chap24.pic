\def\chapternumber{Chapter 24 --- NFS -- 8 January 2004}
\input slides.tex
\centerline{\bbf Chapter 24}
\centerline{\bbf NFS --- Network File System}

Philosophy:
\break
Your files reside on the  disk of {\ltt{}cheetah}.
\break
When you log in to any machine, you want the files available.
\break
If done right, this happens automatically
\break
(i.e., your ``files" don't care where you log in).

NFS goal:
use a file system from another machine

Implementation:
\break
If the file is on the local machine make a procedure call.
\break
If the file is on the remote machine make a remote procedure call.

For ease: files from remote machine are found in directory subtrees.
\break
(so you don't have to worry about individual files being remote or local)
\newslide
\centerline{\bbf NFS}

RPC's are made to the remote machine.

Remote machine runs {\ltt{}rpc.nfsd}

RPC's cause 8K (max) blocks of file/directory to be transferred.

All file system calls are used as though all files are on the local machine.

The system calls branch to remote or local access routines depending
on the locality of the file.

Control/config files:

{\ltt{}/etc/fstab}: says what remote files systems you are using and 
\break
which directory trees they are in.

{\ltt{}/etc/exports}: says what you are making available to which machine.

\newslide
\centerline{\bbf NFS Overview}

Servers are stateless

State information is stored by the client

Disruptions in service will not affect client operation

Note: the server cannot keep any notion of position

Implemented using RPC

{\bit Strongly} influenced by the UNIX file system

Uses UNIX file systems semantics 
\newslide
\centerline{\bbf UNIX File System}

File = a sequence of bytes

File size can change dynamically

A file can grow to be arbitrarily large

Bytes are numbered starting at zero.

Byte access to any file using the byte number

No notion of record boundaries, indexed files, etc.

UNIX = each user a unique number (UID)

UID is used for accounting, authentication, file ownership

{\ltt{}/etc/passwd} associates a name with each UID

Each file has a single owner.

Ownership information is stored with the file.

Users belong to groups (GID) (student, faculty, staff)

A user may belong to several groups.

Each file has a single group.
\newslide
\centerline{\bbf Unix Protection and Access}

Owner controls (can set) access for a file

Separate permissions for owner, group, others.

Permission: read, write and execute 

Permissions: Unix uses 9 bits (plus others)

{\railroadfont
.PS
boxwid=0.4i
bowht=boxwid
Ur: box "1"
Uw: box with .w at last box.e "1"
Ux: box with .w at last box.e "1"
Gr: box with .w at last box.e "1"
Gw: box with .w at last box.e "0"
Gx: box with .w at last box.e "1"
Or: box with .w at last box.e "0"
Ow: box with .w at last box.e "0"
Ox: box with .w at last box.e "1"
"Owner" at Uw.n above
"Group" at Gw.n above
"Others" at Ow.n above
"r" at Ur.s below
"r" at Gr.s below
"r" at Or.s below
"w" at Uw.s below
"w" at Gw.s below
"w" at Ow.s below
"x" at Ux.s below
"x" at Gx.s below
"x" at Ox.s below
Other: box wid 2.0i with .e at Ur.w "..."
"other mode bits" at Other.n above
.PE
\centerline{\box\graph}}
\vt

Owner (User) can read/write/execute
\break
Group members can read/execute
\break
Others can execute
\vt
Directories: bits have a slightly different meaning.

r: you can see what files are there
\break
w: you can add/delete files
\break
x: you can cd to/through the directory
\newslide
\centerline{\bbf Unix file operatons}

Open-Read-Write-Close Paradigm

{\program
int fd;
fd = open("file.c", O_CREATE | O_RDWR, 0644);
lseek(fd, 10L, SEEK_SET);
n = read(fd, buffer, 24);
close(fd);
\endprogram}

Open:the name of the file, whether to create if it doesn't exist,
if you want to read, write, read/write, and the access (mode)
\break
Returned: a descriptor (index to an array of pointers)

Read/write: to transfer data
\break
Begins at current file position, updates the current position

lseek: move the current file position
\break
Offset given in bytes.
\break
{\ltt{}SEEK_SET} ({\ltt{}L_SET}): from start of file 
\break
{\ltt{}SEEK_CUR} ({\ltt{}L_INCR}): from current position
\break
{\ltt{}SEEK_END} ({\ltt{}L_XTND}): from/off end of file

close: done with file
\newslide
\centerline{\bbf Unix File System}

Data blocks: the file is stored in these

Inodes: information about a file is stored in these.

Directories: files that contain information about other files.

Tree: internal nodes = directories, leaves = files 

Links: (aliases) a tree entry is (refers to) another position in the tree.

Hard links: file has two names and it's inode appears in two times in 
directories (on the same disk)

{\program
-r--r--r-- 2  802493  odmach
-r--r--r-- 2  802493  sdmach
\endprogram}

Symbolic links: a "file" is an alias for another file name

{\ltt{}lrwxrwxrwx LocalApps -> /net/piggy/LocalApps}

\newslide
\centerline{\bbf System File Utilities}
{\ltt{}stat}: gives information about a file/directory
\break
includes owner, group and permissions

{\ltt{}stat} is what {\ltt{}ls}, {\ltt{}open}, and other programs use.
\vt

The file system tree can span serveral disks

Mount: specify how a file system 
on one disk should be attached in the hierarchy.

{\ltt{}mount}: display or modify attachment of disks

Anyone can display, must be root to modify
\newslide
\centerline{\bbf NFS Files}

File types match Unix files

{\ltt{}NFNON = 0} -- error, not a file 
\break
{\ltt{}NFREG = 1} -- Regular data file
\break
{\ltt{}NFDIR = 2} -- Directory
\break
{\ltt{}NFBLK = 3} -- Block-oriented device
\break
{\ltt{}NFCHR = 4} -- Charcter-oriented device
\break
{\ltt{}NFLNK = 5} -- Symbolic link

NFS modes match Unix modes. (rwx bits)


NFS file attributes ({\ltt{}fattr}) similar to {\ltt{}stat} structure

NFS Client and Server

Client: on {\ltt{}open} checks to see if it is an NFS file
\break
NFS: uses calls to the appropriate NFS server
\break
regular: uses standard system calls

Server: receives calls, hands back file blocks or information

NFS Mount: specify a portion of the file tree is from a server.
\break
Names a directory and the server it is from
\break
Specifies how to handle retries and dead servers
\newslide
\centerline{\bbf Handles}

{\ltt{}fattr->fileid}: unique file id, specifies
a particular file or directory on an NFS server.
\break
This is the file handle.
\break
File handles are used to identify files.

The server tells the client the handle.

Using a handle, the client can read the file/directory from the server.

NFS client traverse a file path one node at a time.

Example:

cheetah: {\ltt{}/net/aardvark/u1/volper/.cshrc}

{\ltt{}/net} is local
\break
{\ltt{}aardvark} is an nfs mount of {\ltt{}/} on server aardvark
\break
calls aardvark for {\ltt{}fattr} on {\ltt{}/}
\break
uses file id of {\ltt{}/} to do nfs read
\break
uses read to get {\ltt{}fattr} of {\ltt{}u1}
\break
uses file id of {\ltt{}u1} to do nfs read
\break
uses read to get {\ltt{}fattr} of {\ltt{}volper}
\break
uses file id of {\ltt{}volper} to do nfs read
\break
uses read to get {\ltt{}fattr} of {\ltt{}.cshrc}
\break
uses file id of {\ltt{}.cshrc} to do nfs read
\newslide
\centerline{\bbf Stateless Server}

The client retains information about what it is doing.

The server retains some information (such as who has done nfs mounts of server
directories), but does not use it for file system access.

To do a read from a stateless server, the client must:
\break
specify the file id,
\break
the position in the file at which to start the read
\break
specify a device (which disk on the server that the file id refers to)

For directories the client specifies position by giving the number
of the entry it wants (instead of the byte offset).

Magic cookies (security):
\break
directory numbers are ``encrypted",
\break
when an entry is read, server issues the ``encrypted" number for getting
the next entry
\break
This makes it more difficult to fake file handles.
\bye
