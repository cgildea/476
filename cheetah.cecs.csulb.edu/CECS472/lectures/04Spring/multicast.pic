\def\chapternumber{Multicast -- 2 August 2004}
\input slides.tex
\centerline{\bbf Internet Multicasting}

Somewhere between unicast and broadcast.
\break
Goes to a group of machines.
\break
Machines can register/de-register for the group.

Ethernet Hardware support:
\break
1/2 the hardware adddresses are multicast,
\break
(low-bit of high-byte {\ltt{}==} 1).
\break
A card recognizes, IP address, broadcast address.
\break
It can be programmed to recognize
\break
one or more multicast addresses.

\vt
Internet support:
\break
Internet addresses {\ltt{}244.0.0.0}--{\ltt{}239.255.255.255}
\break
are reserved for multicast groups.
\break
These address all start with the 4 bits 1110.
\break
The low 28 bits are the multicast group number.

Some multicast addresses are reserved,
\break
a few of these are:

{\ltt{}224.0.0.2} --- all routers on this subnet.
\break
{\ltt{}224.0.0.5} --- OSPF routers.
\break
{\ltt{}224.0.0.9} --- RIP2 routers.
\break
{\ltt{}224.0.0.84} --- Jini Annoucement.
\newslide
\centerline{\bbf Multicast ARP}

The lower 24 bits of the multicast IP address is placed in
\break
the lower 24 bits of the ethernet address.
\break
The upper 24 bits of the ethernet address are
{\ltt{}0x01.00.5E}
\break
Example: {\ltt{}224.0.0.2} becomes {\ltt{}0x01.00.53.00.00.02}
\break
Implication: no ARP table is necessary

Observation: multiple multicast addresses can share the
same ethernet hardward address.
\break
When a machine recieves a multicast on a hardware
address it is registered to recognize, that multicast
might be for a group it doesn't want to receive.
\break
Implication: each incoming multicast IP number needs to be checked
to ensure it is a group the host wants to receive.

\vt
\centerline{\bbf Multicast Groups}

A host can join/leave a multicast group.

A host can be a member of an arbitrary number of groups.

Multicast is one-to-many so:
\break
ICMP is not allowed with multicast groups: eg.
\break
packets time-out, but this only means for some hosts.
\newslide
\centerline{\bbf Multicast and Routers}

Packets that are multicast are ``seen" by routers.
\break
If the router has multicast enabled,
\break
it forwards the packet
\break
Implication: hosts do not need routing for multicast
If the router has multicast enabled,

\vt
Range: if the hosts limits the time-to-live, the
range of the multicast packet is limited.

Semantic: hosts join groups on specific networks (cables)
\break
Effect: if you have multiple ethernet cards and
\break
the multicast comes in on an unexpected cable
\break
you won't see it.
\vt
IGMP--{\bit{}Internet Group Management Protocol}
\break
It is too wasteful to pass every multicast to every subnet,
you want to pass only to subnets having a hast that is
registered in that group; so,
routers must join multicast groups to pass multicast through.

A host registers its groups with its routers using IGMP
\break
Routers register with adjacent routers using IGMP

IGMP uses multicast, e.g. {\ltt{}224.0.0.2}
\newslide
\centerline{\bbf Multicast Routing}

Subnet routing--route tables change only when the
topology changes.

Multicast routing--route tables may change when a host
joins/leaves a group.

A multicast message into a router implies multicast messages
out on other cables.

A multicast message ``spreads out", loops and
duplicates are a problem.
\newslide

{\tt

.PS
boxht=0.25i
boxwid=0.25i
taplength=0.45i
circlerad=boxht/2
gatedist=2*taplength+boxht
horizspc=0.75
R1: box "R1"
R2: box with .c at R1.c + (4.75*horizspc, 0) "R2"
R3: box with .c at R1.c + (-0.5*horizspc, -gatedist) "R3"
R4: box with .c at R3.c + (2*horizspc, 0) "R4"
R5: box with .c at R3.c + (4*horizspc, 0) "R5"
R6: box with .c at R3.c + (6*horizspc, 0) "R6"
R1stab: line down taplength from R1.s
R1ntab: line up taplength from R1.n
R2stab: line down taplength from R2.s
R2ntab: line up taplength from R2.n
R3stab: line down taplength from R3.s
R3ntab: line up taplength from R3.n
R4stab: line down taplength from R4.s
R4ntab: line up taplength from R4.n
R5stab: line down taplength from R5.s
R5ntab: line up taplength from R5.n
R6stab: line down taplength from R6.s
R6ntab: line up taplength from R6.n

H1: box with .c at R3.c + (3*horizspc, gatedist) "h1"
H2: box with .c at R3.c + (horizspc, 0) "h2"
H3: box with .c at R3.c + (5*horizspc, 0) "h3"
H4: box with .c at R3.c + (-horizspc, -gatedist) "h4"
H5: box with .c at R3.c + (3*horizspc, -gatedist) "h5"
H6: box with .c at R3.c + (7*horizspc, -gatedist) "H6"

H1ntab: line up taplength from H1.n
H2ntab: line up taplength from H2.n
H3ntab: line up taplength from H3.n
H4ntab: line up taplength from H4.n
H5ntab: line up taplength from H5.n
H6ntab: line up taplength from H6.n

line from (R1.w.x,R1ntab.end.y) to (R2.e.x,R1ntab.end.y)
line from (R3.w.x,R3ntab.end.y) to (R4.e.x,R3ntab.end.y)
line from (R5.w.x,R3ntab.end.y) to (R6.e.x,R3ntab.end.y)
line from (R4.w.x,R3stab.end.y) to (R5.e.x,R3stab.end.y)

line from (H4.w.x,R3stab.end.y) to (R3.e.x,R3stab.end.y)
line from (R6.w.x,R3stab.end.y) to (H6.e.x,R3stab.end.y)


.PE
\centerline{\box\graph}

}

\vf
A single spanning tree causes some packets to take long paths.

Need a RIP like algorithm for each source on each
multicast address.

Reverse distances are necessary because forward distances
don't make sense with multiple destinations.

Need to update everytime a host changes its multicast status.
\newslide
\centerline{\bbf Multicast Programming}

1) Set up your socket.
Since this is many to on, you need UDP.

2) Enable multicast on the socket. 
This is usually enabled by default.
This is only necessary to receive.

3) Join a multicast group.
This is only necessary to receive.

4) Sending a multicast DGRAM.
A destination IP of the form 224.x.x.x designates
a packet as multicast.
Actually 224...239 are reserved as multicast.

5) Receiveing a multicast DGRAM.
Use a standard {\ltt{}recvfrom}.
Step 3 (and 2) tells the operating system we want
to receive incoming multicast on our port.

Remember: The well known port rule still applies, 
you only receive multicast if it is to the port
you did the bind on.

\newslide

\centerline{\bbf Multicast Sample Code}

{\program
Place Simplified code
@endprogram}
\bye
