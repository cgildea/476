\def\chapternumber{CECS 472, SNMP  --- Volper -- 7 June 2000}
\input slides.tex
\input cstuff.tex
\centerline{\bbf ASN.1}

Abstract Syntax Notation 1: a standard way of transferring data.
\break
Less efficient than xdr, but more self-contained.
\break
encodes values, records, arrays

ASN Data item: {\ltt{}<tag, length, value>}

tags: 8 bits (gives data type)

{\railroadfont
.PS
boxwid=4.0i
boxht=0.5i
A: box
"C" at 1/16 between A.w and A.e
"C" at 3/16 between A.w and A.e
"t" at 5/16 between A.w and A.e
"T" at 7/16 between A.w and A.e
"T" at 9/16 between A.w and A.e
"T" at 11/16 between A.w and A.e
"T" at 13/16 between A.w and A.e
"T" at 15/16 between A.w and A.e
.PE
\centerline{\box\graph}}

{\ltt{}CC}: 00 Universal (standard), others for private encodings 

{\ltt{}t}: 0 Primitive (simple), 1 constructed (record/array)

{\ltt{}TTTTT}:
\break
{\ltt{}00001} Boolean
\break
{\ltt{}00010} Integer
\break
{\ltt{}00011} bit string
\break
{\ltt{}00100} octet string
\break
{\ltt{}00101} null type
\break
{\ltt{}10000} sequence/sequenceof (record/array)
\break
{\ltt{}10001} set/setof
\break
{\ltt{}10010}...{\ltt{}10110}, {\ltt{}11001} string types
\break
{\ltt{}10111}...{\ltt{}11000} time encodings
\break
{\ltt{}11111} see next octet
\newslide
\centerline{Examples}

4 byte integer (Hex) {\ltt{}02 04 xx xx xx xx}
\break
{\ltt{}02} tag (primitive integer)
\break
{\ltt{}04} length
\break
{\ltt{}xx xx xx xx} 4 byte value (the integer)

{\program
record
   integer := xx xx xx xx
   String := "ABC"
end record;
\endprogram}

{\ltt{}< record , length, 
\break
(<integer, length, value> <character, length, value>)}

Hex {\ltt{}30 0B 02 04 xx xx xx xx 16 03 41 42 43}

{\ltt{}30} tag--Universal constructed (record)
\break
{\ltt{}0B} record is 11 bytes long
\break
{\ltt{}02 04 xx xx xx xx} integer, 4 bytes, value
\break
{\ltt{}16} tag--universal primitive string (IA5)
\break
{\ltt{}03} length (3 byte string
\break
{\ltt{}41 42 43} "ABC"

Lengths: 1..127 (high bit 0) indicate length
\break
128-255 (high bit 1), low seven bits indicate number of bytes in the
integer used to encode the length
\break
Ex: 133: the next 5 bytes contain the length ($2^{10}Gb$)
\newslide
\centerline{\bbf SNMP}
\centerline{Simple Network Management Protocol}

Client: runs on the network managers machine.
\break
Servers: run on machines to be managed
\break
Uses ASN.1 over UDP to communicate between client and server.
\break
(Mostly strings)

Three allowed calls by client:

get-request: send me data. Client lists the variables, server is to
return the value of those variables.

get-next-request: tell me what is next, used for arrays and other data 
structures.
Client lists a variable, server returns the value of the variable following
(pre-order traveral) the one listed.
Client can list several variables.

set-request: change the value of a variable. Client lists the variables
and the new values, server should make the change.

Two responses allowed by server (agent):

get-response--here is the data you wanted (response to get)

trap--you didn't ask for this, but here it is anyway. 
(Use to report error or fault.)
\newslide

{\ltt{}s=connectUDP("134.139.2.2", "161");} -- the snmp port on a router

{\ltt{}write(s,buf,43);} -- send a get-request (43 bytes)

{\program
30 29 2 1 0 4 6 70 75 62 6C 69 63 A0 1C 2 4 0 0 0 1
2 1 0 2 1 0 30 E 30 C 6 8 2B 6 1 2 1 4 3 0 5 0
\endprogram}

{\ltt{}30 29}--sequence length 41
\break
{\ltt{}2 1 0}--leading integer 0
\break
{\ltt{}4 6 70 75 62 6C 69 63}--``public" access request
\break
{\ltt{}A0}--get-request
\break
{\ltt{}2 4 0 0 0 1}--request id is 1
\break
{\ltt{}2 1 0 2 1 0}--0 0 no error, no error message
\break
{\ltt{}30 E}--length 14 octet string
\break
{\ltt{}2b.6.1.2.1.4.3.0}--1.3.6.1.2.1.4.3, # of ip packets received.
\break
{\ltt{}5.0}--null (end of request list)
   
{\program
30 29 2 1 0 4 6 70 75 62 6C 69 63 A2 1C 2 1 1
2 1 0 2 1 0 30 11 30 F 6 8 2b 6 1 2 1 4 3 0
41 3 5F B8 3 
\endprogram}

{\ltt{}30..63}--public access
\break
{\ltt{}a2 1c 2 1 1}--Respson to request id 1
\break
{\ltt{}2 1 0 2 1 0}-- no errors
\break
{\ltt{}30 F . . 4 3 0}--you asked about ip packets

{\ltt{}41 3 5F B8 3}--5FB803 is the count (in hex)
\bye
%
A0 get
A1 get-next
A2 get-response
A3 set
A4 trap
