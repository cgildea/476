\def\chapternumber{Chapter 25 --- NFS -- 4 June 2003}
\input slides.tex
\centerline{\bbf Chapter 25}
\centerline{\bbf NFS Implementation}

Defining a protocol:
\item{}Use structured design
\item{1)} Decide which functionalities to provide.
\item{2)} Design your persistant data structures.
\item{3)} Designate procedure calls to support those functions.
\item{4)} Design the data structures needed to support those procedure
calls (parameters and return values).
\vt
NFS -- RPC
\item{1)} Design declarations for the constants, types, and 
data structures used as procedure arguments 
or function results.
\item{2)} Provide a declaration for each remote procedure 
that specifies its arguments, results, and 
semantics.
\item{3)} Define the semantics for each remote procedure by 
specifying how it processes its arguments 
and computes a return value.
\newslide
\centerline{\bbf NFS procedures}

Design: need Open/Create, Read/Write, Close

Open and close don't apply to a stateless server.
\break
Client remembers open/closed state.

21 procedures (section 25.5)

Reading:
{\ltt{}readres NFSPROC3_READ(READ3args)=6;}

{\program
struct READ3args {
  nfs_fh3 file;   /* file handle */
  offset3 offset;/* where read data */
  count3 count; /* bytes to read */
};
\endprogram}

Tell the server which file, where, how much.

Returned an error message or file attributes plus data 

{\ltt{}offset3}, {\ltt{}count3} -- 16 bit (ancient), 32 bit (now)
64 bit (future) integers.

Maximum data = 8K (don't clog the net)

Writing is similar
\newslide
\centerline{\bbf File Handles}

Getting a file handle:
\break
{\ltt{}diropres NFSPROC_LOOKUP(nfs3_diropargs)=4;}

{\program
struct nfs3_diropargs{
  struct nfs_fh dir; /* a directory handle */
  const char *name; /* what to look up */
}
\endprogram}

Used by client to traverse the tree a step at a time

Given a directory (handle) and a file name,
\break
return a null or a handle plus attributes:

{\program
struct diropres switch(stat status){
  case NFS3_OK: struct{
     struct nfs_fh *fh;
     struct nfs_fattr *fattr;} nfs3_diropok;
    default: void;
}
\endprogram}

Other operations needed:

Get/Set attributes
\break
Create/delete/mv a file
\break
Create/delete a directory
\break
step through a directory
\newslide
\centerline{\bbf NFS Mount}

A separate RPC program

Services:
\item{1)} Client can obtain of NFS accessible directory hierarchy.
\item{2)} Allow client to mount a directory hierarchy.
\item{3)} Authenticates each request and validates 
permission to access the requested hierarchy.
\item{4)} Returns a file handle for the root directory of 
the mounted hierarchy.
\bye
