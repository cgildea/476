\def\chapternumber{Chapter 12 --- A Threaded Server -- 23 August 2002}
\input slides.tex
\centerline{\bbf Chapter 12}
\centerline{A Threaded Server}

{\bit Motivation:}
Threads give you concurrency, without as much overhead as processes.

{\bit Paradigm:}
A thread is a procedure call that runs simultaneously with the parent.

Variables local to the procedure are unique to the thread.

Global variables are shared by all threads.
\break
Common globals make it:
\break
1) easy to exhange data
\break
2) necessary to use mutual exclusion when accessing global data

The descriptor table is global (shared by all threads).

Downside: if any thread crashes, the process crashes taking all
threads with it.

Note: if any thread uses {\ltt{}exit()}, the process exits taking
all threads with it.
\newslide
Echo with threads (similar to section 12.8). 
Only the basic echo is done, not the ``stats" and mutex stuff.

{\cprogram
// main program
pthread_t th;
msock = passiveTCP(service, QLEN);
ssock = accept(msock, (struct sockaddr *)&fsin, &alen);
if (ssock < 0)
  errexit("accept: %s\n", strerror(errno));
if (pthread_create(&th, 0, 
  (void * (*)(void *))TCPechod, (void *)ssock) < 0)
   errexit("pthread_create: %s\n", strerror(errno));
@endprogram}

Added: a thread variable ({\ltt{}th})
\break
Added: creating the thread ({\ltt{}pthread_create})
\break
Main program (parent) continues after the {\ltt{}pthead_create},
at the instruction after the if statement.

The thread (child) continues with a procedure call to {\ltt{}TCPechod}.
If it ever tries to return from this call the thread terminates.

{\ltt{}(void * (*)(void *)}: 
\break
A function/subroutine is an address {\ltt{}(*)}
\break
Has one parameter that is  a pointer ({\ltt{}void *})
\break
Returns a pointer.

\newslide
\centerline{\bbf Mutual exclusion}

The utilities critical sections are:

Declare a semaphore:
\break
{\ltt{}pthread_mutex_t semaphore;}

Initialize a semaphore:
\break
{\ltt{}pthread_mutex_init(&semaphore);}

Lock: entering critical section ({\ltt{}wait}):
\break
{\ltt{}pthread_mutex_lock(&semaphore);}

Unlock: leaving critical section ({\ltt{}signal})
\break
{\ltt{}pthread_mutex_unlock(&semaphore);}


\bye
